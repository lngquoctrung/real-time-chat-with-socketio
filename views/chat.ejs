<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <title>Trò chuyện</title>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>

        <link rel="icon" type="image/png" href="https://chat-app.qctrung.site/public/images/icon.png"/>
        <meta property="og:title" content="Danh sách người dùng - Chat App">
        <meta property="og:description" content="Ứng dụng chat trực tuyến - Kết nối và trò chuyện với mọi người">
        <meta property="og:image" content="https://chat-app.qctrung.site/public/images/preview.png">
        <meta property="og:url" content="https://chat-app.qctrung.site">
        <meta property="og:type" content="website">

        <link rel="stylesheet" href="/public/css/chat.css"/>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"/>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css"/>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script src="/socket.io/socket.io.js"></script>
    </head>

    <body>
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-12 col-lg-10 col-xl-9">
                    <div class="chat-container">
                        <div class="chat-header">
                            <div class="user-section">
                                <div class="avatar">
                                    <%= locals.receiver.username.charAt(0).toUpperCase() %>
                                </div>
                                <div class="user-info">
                                    <h2 class="user-name"><%= locals.receiver.username %></h2>
                                    <p class="online">Truy cập lúc <%= locals.receiver.onlineAt %></p>
                                </div>
                            </div>
                            <div class="actions">
                                <i class="fas fa-phone-alt"></i>
                                <i class="fas fa-video"></i>
                                <i class="fas fa-search"></i>
                            </div>
                        </div>

                        <div class="conversation"></div>

                        <div class="message-input">
                            <div class="typing"></div>
                            <input
                                id="message"
                                type="text"
                                name="message"
                                placeholder="Nhập tin nhắn..."
                                autocomplete="off"
                            />
                            <button id="send-msg-btn">
                                <i class="fas fa-paper-plane"></i> Gửi
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            const socket = io();
            const senderEmail = "<%= locals.sender.email %>";
            const receiverEmail = "<%= locals.receiver.email %>";
            const senderUsername = "<%= locals.sender.username %>";

            $(() => {
                const sendButton = $('#send-msg-btn');
                const messageInput = $('#message');
                const typingDiv = $('.typing');
                
                let isTyping = false;
                let typingTimer = null;
                let typingTimeout = null;
                
                sendButton.prop('disabled', true);

                function renderMessage(message) {
                    const messageDiv = $('<div></div>');
                    messageDiv.addClass(
                        message.sender.email === senderEmail 
                            ? 'message my-message' 
                            : 'message their-message'
                    );
                    messageDiv.html(`
                        ${message.content}
                        <span class="time">${message.sentAt}</span>
                    `);
                    $('.conversation').append(messageDiv);
                    $('.conversation').scrollTop($('.conversation')[0].scrollHeight);
                }

                const handleTyping = () => {
                    const message = messageInput.val().trim();
                    
                    if (message !== '') {
                        sendButton.prop('disabled', false);
                    
                        if (!isTyping) {
                            isTyping = true;
                            socket.emit('notify-user-typing', { 
                                senderEmail, 
                                receiverEmail,
                                senderUsername,
                                typing: true
                            });
                        }
                    
                        clearTimeout(typingTimer);
                        
                        typingTimer = setTimeout(() => {
                            isTyping = false;
                            socket.emit('notify-user-typing', { 
                                senderEmail, 
                                receiverEmail,
                                senderUsername,
                                typing: false
                            });
                        }, 2000);
                    } else {
                        sendButton.prop('disabled', true);
                        if (isTyping) {
                            isTyping = false;
                            socket.emit('notify-user-typing', { 
                                senderEmail, 
                                receiverEmail,
                                senderUsername,
                                typing: false
                            });
                        }
                    }
                };

                const getCurrentTime = () => {
                    const now = new Date();
                    const hours = now.getHours().toString().padStart(2, '0');
                    const minutes = now.getMinutes().toString().padStart(2, '0');
                    return `${hours}:${minutes}`;
                };

                const sendMessage = (receiverEmail, msg) => {
                    const messageDiv = $('<div></div>');
                    messageDiv.addClass('message my-message');
                    messageDiv.html(`
                        ${msg}
                        <span class="time">${getCurrentTime()}</span>
                    `);
                    $('.conversation').append(messageDiv);
                    $('.conversation').scrollTop($('.conversation')[0].scrollHeight);
                    socket.emit('send-message', { target: receiverEmail, msg });
                };

                const handleSendMessage = () => {
                    const msg = messageInput.val().trim();
                    if (!msg) return;
                    
                    sendMessage(receiverEmail, msg);
                    messageInput.val('');
                    sendButton.prop('disabled', true);
                    
                    clearTimeout(typingTimer);
                    if (isTyping) {
                        isTyping = false;
                        socket.emit('notify-user-typing', { 
                            senderEmail, 
                            receiverEmail,
                            senderUsername,
                            typing: false
                        });
                    }
                    typingDiv.hide();
                };

                messageInput.on('input', handleTyping);
                sendButton.on('click', handleSendMessage);
                messageInput.on('keypress', function(e) {
                    if (e.which === 13 && !sendButton.prop('disabled')) {
                        handleSendMessage();
                    }
                });

                socket.emit('get-message-history', { targetEmail: receiverEmail });

                socket.on('message-history', (messages) => {
                    messages.forEach(msg => {
                        renderMessage(msg);
                    });
                });

                socket.on('receive-message', (message) => {
                    const messageDiv = $('<div></div>');
                    messageDiv.addClass('message their-message');
                    messageDiv.html(`
                        ${message.content}
                        <span class="time">${message.sentAt}</span>
                    `);
                    $('.conversation').append(messageDiv);
                    $('.conversation').scrollTop($('.conversation')[0].scrollHeight);
                });

                socket.on('get-notification-user-typing', (data) => {
                    if (data.sender === receiverEmail) {
                        clearTimeout(typingTimeout);
                        
                        if (data.typing) {
                            typingDiv.text(`${data.username} đang soạn tin...`);
                            typingDiv.fadeIn(200);
                            
                            typingTimeout = setTimeout(() => {
                                typingDiv.fadeOut(200);
                            }, 3000);
                        } else {
                            typingDiv.fadeOut(200);
                        }
                    }
                });

                // socket.on('connect', () => {
                //     console.log('Socket connected:', socket.id);
                // });

                // socket.on('disconnect', () => {
                //     console.log('Socket disconnected');
                // });
            });
        </script>
    </body>
</html>
