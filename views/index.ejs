<!--
  Created by: Mai Van Manh
  Date: 11/02/2020
-->
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <title>Danh sách người dùng</title>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"/>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css"/>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script src="/socket.io/socket.io.js"></script>
        <style>
            * {
                box-sizing: border-box;
            }

            .user {
                display: flex;
                align-items: center;
                padding: 12px 24px;
                cursor: pointer;
            }

            .user:nth-child(odd) {
                background-color: #f4f5f7;
            }

            .user:hover {
                background-color: #e6efff;
                transition: 0.3s;
            }

            .avatar {
                font-weight: bold;
                font-size: 1.5rem;
                background-color: deepskyblue;
                width: 50px;
                height: 50px;
                margin-right: 16px;
                border-radius: 50%;
                display: flex;
                justify-content: center;
                align-items: center;
                color: white;
            }

            .user-info {
                height: 50px;
                flex-grow: 1;
            }

            .user-name {
                font-size: 1.1rem;
            }

            .user-info .online {
                font-size: 0.9rem;
                color: rgb(99, 99, 99);
            }

            .user .status {
                width: 90px;
                text-align: center;
            }

            .user:hover {
                background-color: #e6efff;
            }

            .user:hover .avatar {
                background-color: rgb(7, 142, 204);
                transition: 0.3s;
            }

            .user:hover .user-name {
                font-weight: 450;
                transition: 0.3s;
            }

            .user.offline {
                opacity: 0.5; /* Blur */
                pointer-events: none; /* Disable all mouse events, including hover */
            }

            .user.offline:hover {
                background-color: transparent; /* No hover effect */
            }

            .user.offline .avatar {
                background-color: gray; /* Avatar background color when offline */
            }

            .user.offline .user-name,
            .user.offline .online {
                color: rgb(169, 169, 169); /* Light text color when offline */
            }
        </style>
    </head>

    <body>
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-7">
                    <div class="rounded border mt-1 mb-3">
                        <div class="d-flex px-4 mt-3">
                            <h4><%= locals.username %></h4>
                            <button
                                class="btn btn-success ml-auto"
                                type="button"
                                onclick="handleLogout()"
                            >
                                Logout
                            </button>
                        </div>
                        <h4 class="text-primary text-center my-3">
                            Danh sách người dùng trực tuyến
                        </h4>
                        <p style="padding: 0 24px">
                            Số người online:
                            <strong
                                id="num-of-users"
                                class="badge badge-danger badge-pill"
                                >5</strong
                            >
                        </p>
                        <div
                            id="people"
                            class="people"
                        ></div>
                    </div>
                    <p class="small">
                        Danh sách này cần được cập nhật tự động mỗi khi có người
                        dùng đăng nhập hoặc đăng xuất/thoát. Ngoài ra trạng thái
                        của mỗi người dùng cũng cần được cập nhật mỗi khi họ
                        tham gia hoặc rời một cuộc trò chuyện.
                    </p>
                    <p class="small">
                        Để cho đơn giản, trang web chỉ cần hỗ trợ với mỗi người
                        vào một thời điểm, không thể chat với người có trạng
                        thái là <strong>đang bận</strong>.
                    </p>
                </div>
            </div>

            <div
                id="online-notification"
                class="alert alert-success position-fixed small"
                style="bottom: 20px; left: 20px;"
            >
                <strong>Trần Quang Trí</strong> vừa mới online
            </div>
            <div
                id="offline-notification"
                class="alert alert-danger position-fixed small"
                style="bottom: 20px; right: 20px"
            >
                <strong>Trần Quang Trí</strong> đã thoát khỏi ứng dụng
            </div>
        </div>

        <script>
            // Socket IO
            const socket = io();
            const email = "<%= locals.email %>";
            // Check and store connection status
            const lastConnectionKey = `last_connection`;

            const handleLogout = async () => {
                const response = await fetch(
                    "/auth/logout",
                    { method: "POST" }
                );
                if (response.status === 200 && response.ok)
                    window.location.replace("/login");
            };

            // Display notification message
            const displayMessage = (id, msg) => {
                const toastMsg = $(`#${id}`);
                toastMsg.html(msg);
                toastMsg.fadeIn(2000);
                setTimeout(() => {
                    toastMsg.fadeOut(1000);
                }, 1000);
            }

            // Display toast message when user connected
            const handleConnect = (user) => {
                // Check last connection time
                const lastConnection = localStorage.getItem(lastConnectionKey);
                // If there is no recent connection
                if (!lastConnection) {
                    const msg = `<strong>${user.username}</strong> vừa mới online`
                    displayMessage('online-notification', msg);
                }
                // Save current connection time
                localStorage.setItem(lastConnectionKey, Date.now().toString());
            }

            const handleDisconnect = (user) => {
                const msg = `<strong>${user.username}</strong> đã thoát khỏi ứng dụng`
                displayMessage('offline-notification', msg);
                // Remove current connection time when user log out
                localStorage.removeItem(lastConnectionKey);
            }

            const displayUser = (user) => {
                const userDiv = $('<div></div>');
                userDiv.addClass(`user ${user.status !== 'online' ? 'offline' : ''}`.trim());
                userDiv.html(`
                    <div class="avatar">${user.username.charAt(0).toUpperCase()}</div>
                    <div class="user-info">
                        <div class="user-name">${user.username}</div>
                        <div class="online">
                            ${
                                user.status === 'online' ? 
                                    `Truy cập lúc: ${user.onlineAt}` : 
                                    `Đăng xuất lúc: ${user.offlineAt}`
                            }
                        </div>
                    </div>
                    <div class="status">
                        <div class="badge ${user.status === 'online' ? 'badge-success' : 'badge-warning'} badge-pill">
                            ${user.status === 'online' ? 'Đang rảnh' : 'Đang bận'}
                        </div>
                    </div>
                `);
                // Only chat when user online
                if(user.status === 'online'){
                    userDiv.on('click', () => {
                        window.location.href = `/chat/${user.email}`;
                    });
                }
                $('#people').append(userDiv);
            }

            const handleDisplayUsers = (users) => {
                console.log(email);
                // Clear child elements
                $('#people').empty();
                const otherUsers = users.filter(u => u.email !== email);
                // Display the number of online users
                const otherOnlineUsers = otherUsers.filter(u => u.status === 'online');
                $('#num-of-users').text(otherOnlineUsers.length);
                // Display the list of users
                otherUsers.forEach(user => {
                    displayUser(user);
                });
            }

            // All document is ready === window.onload
            $(document).ready(() => {
                // Hide toast message
                $('#online-notification').hide();
                $('#offline-notification').hide();

                // Catch event user connect to the server
                socket.on('user-connect', handleConnect);
                // Catch event user disconnect to the server
                socket.on('user-disconnect', handleDisconnect);
                // Display the list of users
                socket.on('users', handleDisplayUsers);
            });
        </script>
    </body>
</html>
