name: Deploy Chat App to VPS

on:
    push:
        branches:
            - main

jobs:
    setup:
        name: Create project folder and environment variable file on VPS
        runs-on: ubuntu-latest
        steps:
            -
                name: Create folder project on VPS
                uses: appleboy/ssh-action@master
                with:
                    username: ${{ secrets.VPS_USERNAME }}
                    host: ${{ secrets.VPS_HOST }}
                    key: ${{ secrets.VPS_KEY }}
                    script: |
                        # Create folder project
                        mkdir -p ${{ secrets.PROJECT_PATH }}
                        cd ${{ secrets.PROJECT_PATH }}
                        
                        # Create environment file if not exists
                        if [ ! -e ".env" ]; then
                            echo "APP_HOST=${{ secrets.APP_HOST }}" > .env
                            echo "APP_PORT=${{ secrets.APP_PORT }}" >> .env
                            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
                            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
                            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
                            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
                            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
                            echo "SESSION_KEY=${{ secrets.SESSION_KEY }}" >> .env
                            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
                            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
                            echo "GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}" >> .env
                            echo "GOOGLE_PASSWORD=${{ secrets.GOOGLE_PASSWORD }}" >> .env
                            echo "ACCESS_TOKEN_KEY=${{ secrets.ACCESS_TOKEN_KEY }}" >> .env
                            echo "REFRESH_TOKEN_KEY=${{ secrets.REFRESH_TOKEN_KEY }}" >> .env
                            echo "BCRYPTJS_SALT=${{ secrets.BCRYPTJS_SALT }}" >> .env
                            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env

                            # Set owner and permission for environment file
                            chmod 600 .env
                            chown ${{ secrets.VPS_USERNAME }}:${{ secrets.VPS_USERNAME }} .env
                        fi
                      
                        # Pull MongoDB image
                        docker pull mongo:6-jammy
            - 
                name: Checkout
                uses: actions/checkout@v3
            -
                name: Copy Dockerfile and docker-compose.yml files to VPS
                uses: appleboy/scp-action@master
                with:
                    host: ${{ secrets.VPS_HOST }}
                    username: ${{ secrets.VPS_USERNAME }}
                    key: ${{ secrets.VPS_KEY }}
                    source: "docker-compose.yml"
                    target: "${{ secrets.PROJECT_PATH }}"
    
    build-push:
        name: Build and push Docker image to Docker Hub
        needs: setup
        runs-on: ubuntu-latest
        steps:
            -
                name: Checkout
                uses: actions/checkout@v3
            -
                name: Login Docker Hub
                uses: docker/login-action@v3
                with:
                    username: ${{ secrets.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_PASSWORD }}
            -
                name: Setup QEMU
                uses: docker/setup-qemu-action@v3
            -
                name: Setup Docker Buildx
                uses: docker/setup-buildx-action@v3
            -
                name: Build and push
                uses: docker/build-push-action@v6
                with:
                    push: true
                    no-cache: 'true'
                    tags: ${{ secrets.DOCKERHUB_USERNAME }}/socketio-chat-app:latest

    deploy:
        name: Deploy application to VPS
        runs-on: ubuntu-latest
        needs: build-push
        steps:
            -
                name: Deploy application
                uses: appleboy/ssh-action@master
                with:
                    username: ${{ secrets.VPS_USERNAME }}
                    host: ${{ secrets.VPS_HOST }}
                    key: ${{ secrets.VPS_KEY }}
                    script: |
                        # Change to project directory
                        cd ${{ secrets.PROJECT_PATH }}

                        # Login Docker Hub
                        docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

                        # Remove old containers and images
                        docker compose down --rmi all 2>/dev/null || true

                        # Run new containers
                        docker compose up -d --build